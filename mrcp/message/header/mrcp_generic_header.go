package header

import (
	"github.com/navi-tt/go-mrcp/mrcp"
	"github.com/navi-tt/go-mrcp/toolkit"
)

/** Enumeration of MRCP generic header fields */
type MRCPGenericHeaderId = int

const (
	GENERIC_HEADER_ACTIVE_REQUEST_ID_LIST MRCPGenericHeaderId = iota
	GENERIC_HEADER_PROXY_SYNC_ID
	GENERIC_HEADER_ACCEPT_CHARSET
	GENERIC_HEADER_CONTENT_TYPE
	GENERIC_HEADER_CONTENT_ID
	GENERIC_HEADER_CONTENT_BASE
	GENERIC_HEADER_CONTENT_ENCODING
	GENERIC_HEADER_CONTENT_LOCATION
	GENERIC_HEADER_CONTENT_LENGTH
	GENERIC_HEADER_CACHE_CONTROL
	GENERIC_HEADER_LOGGING_TAG
	GENERIC_HEADER_VENDOR_SPECIFIC_PARAMS

	/** Additional header fields for MRCP v2 */
	GENERIC_HEADER_ACCEPT
	GENERIC_HEADER_FETCH_TIMEOUT
	GENERIC_HEADER_SET_COOKIE
	GENERIC_HEADER_SET_COOKIE2

	GENERIC_HEADER_COUNT
)

const __MAX_ACTIVE_REQUEST_ID_COUNT = 5

type MRCPRequestIdList struct {
	ids   [__MAX_ACTIVE_REQUEST_ID_COUNT]mrcp.MRCPRequestId // Array of request identifiers
	count int64                                             // Number of request identifiers
}

type MRCPGenericHeader struct {
	ActiveRequestIdList MRCPRequestIdList // Indicates the list of request-ids to which it should apply
	/** Helps the resource receiving the event, proxied by the client,
	to decide if this event has been processed through a direct interaction of the resources */
	ProxySyncId string
	/** Specifies the acceptable character set for entities returned in the response or events associated with this request */
	AcceptCharset string
	/** Restricted to speech markup, grammar, recognition results, etc. */
	ContentType string
	/** Contains an ID or name for the content, by which it can be referred to */
	ContentId string
	/** May be used to specify the base URI for resolving relative URLs within the entity */
	contentBase string
	/** Indicates what additional content coding has been applied to the entity-body */
	ContentEncoding string
	/** Statement of the location of the resource corresponding to this particular entity at the time of the request */
	ContentLocation string
	/** Contains the length of the content of the message body */
	ContentLength int64
	/** Defines the default caching algorithms on the media server for the session or request */
	CacheControl string
	/** Sets the logging tag for logs generated by the media server */
	LoggingTag string
	/** Specifies the vendor specific parameters used by the media server */
	VendorSpecificParams *toolkit.AptPairArr

	/** Additional header fields for MRCP v2 */
	/** Specifies the acceptable media types set for entities returned in the response or events associated with this request */
	accept string
	/** Defines the timeout for content that the server may need to fetch over the network */
	FetchTimeout int64
	/** Enables to synchronize the cookie store of MRCP v2 client and server */
	SetCookie string
	/** Enables to synchronize the cookie store of MRCP v2 client and server */
	SetCookie2 string
}

/** Get generic header vtable */
func MRCPGetGenericHeaderVTableGet(version mrcp.Version) *MRCPHeaderVTable {
	return nil
}

/** Append active request id list */
func (h *MRCPGenericHeader) ActiveRequestIdListAppend(requestId mrcp.MRCPRequestId) error {
	return nil
}

/** Find request id in active request id list */
func (h *MRCPGenericHeader) ActiveRequestIdListFind(requestId mrcp.MRCPRequestId) error {
	return nil
}
